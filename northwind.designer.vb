'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="MainLMS")>  _
Partial Public Class northwindDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertClassroomTable(instance As ClassroomTable)
    End Sub
  Partial Private Sub UpdateClassroomTable(instance As ClassroomTable)
    End Sub
  Partial Private Sub DeleteClassroomTable(instance As ClassroomTable)
    End Sub
  Partial Private Sub InsertCourseTable(instance As CourseTable)
    End Sub
  Partial Private Sub UpdateCourseTable(instance As CourseTable)
    End Sub
  Partial Private Sub DeleteCourseTable(instance As CourseTable)
    End Sub
  Partial Private Sub InsertFacultyTable(instance As FacultyTable)
    End Sub
  Partial Private Sub UpdateFacultyTable(instance As FacultyTable)
    End Sub
  Partial Private Sub DeleteFacultyTable(instance As FacultyTable)
    End Sub
  Partial Private Sub InsertSemesterTable(instance As SemesterTable)
    End Sub
  Partial Private Sub UpdateSemesterTable(instance As SemesterTable)
    End Sub
  Partial Private Sub DeleteSemesterTable(instance As SemesterTable)
    End Sub
  Partial Private Sub InsertStudentTable(instance As StudentTable)
    End Sub
  Partial Private Sub UpdateStudentTable(instance As StudentTable)
    End Sub
  Partial Private Sub DeleteStudentTable(instance As StudentTable)
    End Sub
  Partial Private Sub InsertTextbookTable(instance As TextbookTable)
    End Sub
  Partial Private Sub UpdateTextbookTable(instance As TextbookTable)
    End Sub
  Partial Private Sub DeleteTextbookTable(instance As TextbookTable)
    End Sub
  Partial Private Sub InsertUserTable(instance As UserTable)
    End Sub
  Partial Private Sub UpdateUserTable(instance As UserTable)
    End Sub
  Partial Private Sub DeleteUserTable(instance As UserTable)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.SoftEng_LMS.My.MySettings.Default.MainLMSConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property AssignmentTables() As System.Data.Linq.Table(Of AssignmentTable)
		Get
			Return Me.GetTable(Of AssignmentTable)
		End Get
	End Property
	
	Public ReadOnly Property ClassroomTables() As System.Data.Linq.Table(Of ClassroomTable)
		Get
			Return Me.GetTable(Of ClassroomTable)
		End Get
	End Property
	
	Public ReadOnly Property CourseTables() As System.Data.Linq.Table(Of CourseTable)
		Get
			Return Me.GetTable(Of CourseTable)
		End Get
	End Property
	
	Public ReadOnly Property FacultyTables() As System.Data.Linq.Table(Of FacultyTable)
		Get
			Return Me.GetTable(Of FacultyTable)
		End Get
	End Property
	
	Public ReadOnly Property SemesterTables() As System.Data.Linq.Table(Of SemesterTable)
		Get
			Return Me.GetTable(Of SemesterTable)
		End Get
	End Property
	
	Public ReadOnly Property StudentTables() As System.Data.Linq.Table(Of StudentTable)
		Get
			Return Me.GetTable(Of StudentTable)
		End Get
	End Property
	
	Public ReadOnly Property TextbookTables() As System.Data.Linq.Table(Of TextbookTable)
		Get
			Return Me.GetTable(Of TextbookTable)
		End Get
	End Property
	
	Public ReadOnly Property UserTables() As System.Data.Linq.Table(Of UserTable)
		Get
			Return Me.GetTable(Of UserTable)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AssignmentTable")>  _
Partial Public Class AssignmentTable
	
	Private _AssignmentId As Integer
	
	Private _StudentId As Integer
	
	Private _CourseId As Integer
	
	Private _Description As String
	
	Private _StartDate As Date
	
	Private _DueDate As Date
	
	Private _Grade As System.Nullable(Of Integer)
	
	Private _FacultyId As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AssignmentId", DbType:="Int NOT NULL")>  _
	Public Property AssignmentId() As Integer
		Get
			Return Me._AssignmentId
		End Get
		Set
			If ((Me._AssignmentId = value)  _
						= false) Then
				Me._AssignmentId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StudentId", DbType:="Int NOT NULL")>  _
	Public Property StudentId() As Integer
		Get
			Return Me._StudentId
		End Get
		Set
			If ((Me._StudentId = value)  _
						= false) Then
				Me._StudentId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseId", DbType:="Int NOT NULL")>  _
	Public Property CourseId() As Integer
		Get
			Return Me._CourseId
		End Get
		Set
			If ((Me._CourseId = value)  _
						= false) Then
				Me._CourseId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="Date NOT NULL")>  _
	Public Property StartDate() As Date
		Get
			Return Me._StartDate
		End Get
		Set
			If ((Me._StartDate = value)  _
						= false) Then
				Me._StartDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DueDate", DbType:="DateTime NOT NULL")>  _
	Public Property DueDate() As Date
		Get
			Return Me._DueDate
		End Get
		Set
			If ((Me._DueDate = value)  _
						= false) Then
				Me._DueDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Grade", DbType:="Int")>  _
	Public Property Grade() As System.Nullable(Of Integer)
		Get
			Return Me._Grade
		End Get
		Set
			If (Me._Grade.Equals(value) = false) Then
				Me._Grade = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FacultyId", DbType:="Int NOT NULL")>  _
	Public Property FacultyId() As Integer
		Get
			Return Me._FacultyId
		End Get
		Set
			If ((Me._FacultyId = value)  _
						= false) Then
				Me._FacultyId = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ClassroomTable")>  _
Partial Public Class ClassroomTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ClassId As Integer
	
	Private _CourseId As Integer
	
	Private _StudentId As Integer
	
	Private _FacultyId As Integer
	
	Private _CourseTable As EntityRef(Of CourseTable)
	
	Private _FacultyTable As EntityRef(Of FacultyTable)
	
	Private _StudentTable As EntityRef(Of StudentTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnClassIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnClassIdChanged()
    End Sub
    Partial Private Sub OnCourseIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCourseIdChanged()
    End Sub
    Partial Private Sub OnStudentIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnStudentIdChanged()
    End Sub
    Partial Private Sub OnFacultyIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnFacultyIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CourseTable = CType(Nothing, EntityRef(Of CourseTable))
		Me._FacultyTable = CType(Nothing, EntityRef(Of FacultyTable))
		Me._StudentTable = CType(Nothing, EntityRef(Of StudentTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClassId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ClassId() As Integer
		Get
			Return Me._ClassId
		End Get
		Set
			If ((Me._ClassId = value)  _
						= false) Then
				Me.OnClassIdChanging(value)
				Me.SendPropertyChanging
				Me._ClassId = value
				Me.SendPropertyChanged("ClassId")
				Me.OnClassIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseId", DbType:="Int NOT NULL")>  _
	Public Property CourseId() As Integer
		Get
			Return Me._CourseId
		End Get
		Set
			If ((Me._CourseId = value)  _
						= false) Then
				If Me._CourseTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCourseIdChanging(value)
				Me.SendPropertyChanging
				Me._CourseId = value
				Me.SendPropertyChanged("CourseId")
				Me.OnCourseIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StudentId", DbType:="Int NOT NULL")>  _
	Public Property StudentId() As Integer
		Get
			Return Me._StudentId
		End Get
		Set
			If ((Me._StudentId = value)  _
						= false) Then
				If Me._StudentTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStudentIdChanging(value)
				Me.SendPropertyChanging
				Me._StudentId = value
				Me.SendPropertyChanged("StudentId")
				Me.OnStudentIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FacultyId", DbType:="Int NOT NULL")>  _
	Public Property FacultyId() As Integer
		Get
			Return Me._FacultyId
		End Get
		Set
			If ((Me._FacultyId = value)  _
						= false) Then
				If Me._FacultyTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFacultyIdChanging(value)
				Me.SendPropertyChanging
				Me._FacultyId = value
				Me.SendPropertyChanged("FacultyId")
				Me.OnFacultyIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CourseTable_ClassroomTable", Storage:="_CourseTable", ThisKey:="CourseId", OtherKey:="CourseId", IsForeignKey:=true)>  _
	Public Property CourseTable() As CourseTable
		Get
			Return Me._CourseTable.Entity
		End Get
		Set
			Dim previousValue As CourseTable = Me._CourseTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CourseTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CourseTable.Entity = Nothing
					previousValue.ClassroomTables.Remove(Me)
				End If
				Me._CourseTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ClassroomTables.Add(Me)
					Me._CourseId = value.CourseId
				Else
					Me._CourseId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CourseTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FacultyTable_ClassroomTable", Storage:="_FacultyTable", ThisKey:="FacultyId", OtherKey:="FacultyId", IsForeignKey:=true)>  _
	Public Property FacultyTable() As FacultyTable
		Get
			Return Me._FacultyTable.Entity
		End Get
		Set
			Dim previousValue As FacultyTable = Me._FacultyTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FacultyTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FacultyTable.Entity = Nothing
					previousValue.ClassroomTables.Remove(Me)
				End If
				Me._FacultyTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ClassroomTables.Add(Me)
					Me._FacultyId = value.FacultyId
				Else
					Me._FacultyId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("FacultyTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="StudentTable_ClassroomTable", Storage:="_StudentTable", ThisKey:="StudentId", OtherKey:="StudentId", IsForeignKey:=true)>  _
	Public Property StudentTable() As StudentTable
		Get
			Return Me._StudentTable.Entity
		End Get
		Set
			Dim previousValue As StudentTable = Me._StudentTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._StudentTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._StudentTable.Entity = Nothing
					previousValue.ClassroomTables.Remove(Me)
				End If
				Me._StudentTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ClassroomTables.Add(Me)
					Me._StudentId = value.StudentId
				Else
					Me._StudentId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("StudentTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CourseTable")>  _
Partial Public Class CourseTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CourseId As Integer
	
	Private _CourseName As String
	
	Private _Credits As Integer
	
	Private _Semester As Integer
	
	Private _FacultyId As Integer
	
	Private _StartDate As Date
	
	Private _EndDate As Date
	
	Private _ClassroomTables As EntitySet(Of ClassroomTable)
	
	Private _TextbookTables As EntitySet(Of TextbookTable)
	
	Private _FacultyTable As EntityRef(Of FacultyTable)
	
	Private _SemesterTable As EntityRef(Of SemesterTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCourseIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCourseIdChanged()
    End Sub
    Partial Private Sub OnCourseNameChanging(value As String)
    End Sub
    Partial Private Sub OnCourseNameChanged()
    End Sub
    Partial Private Sub OnCreditsChanging(value As Integer)
    End Sub
    Partial Private Sub OnCreditsChanged()
    End Sub
    Partial Private Sub OnSemesterChanging(value As Integer)
    End Sub
    Partial Private Sub OnSemesterChanged()
    End Sub
    Partial Private Sub OnFacultyIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnFacultyIdChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As Date)
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnEndDateChanging(value As Date)
    End Sub
    Partial Private Sub OnEndDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ClassroomTables = New EntitySet(Of ClassroomTable)(AddressOf Me.attach_ClassroomTables, AddressOf Me.detach_ClassroomTables)
		Me._TextbookTables = New EntitySet(Of TextbookTable)(AddressOf Me.attach_TextbookTables, AddressOf Me.detach_TextbookTables)
		Me._FacultyTable = CType(Nothing, EntityRef(Of FacultyTable))
		Me._SemesterTable = CType(Nothing, EntityRef(Of SemesterTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CourseId() As Integer
		Get
			Return Me._CourseId
		End Get
		Set
			If ((Me._CourseId = value)  _
						= false) Then
				Me.OnCourseIdChanging(value)
				Me.SendPropertyChanging
				Me._CourseId = value
				Me.SendPropertyChanged("CourseId")
				Me.OnCourseIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property CourseName() As String
		Get
			Return Me._CourseName
		End Get
		Set
			If (String.Equals(Me._CourseName, value) = false) Then
				Me.OnCourseNameChanging(value)
				Me.SendPropertyChanging
				Me._CourseName = value
				Me.SendPropertyChanged("CourseName")
				Me.OnCourseNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Credits", DbType:="Int NOT NULL")>  _
	Public Property Credits() As Integer
		Get
			Return Me._Credits
		End Get
		Set
			If ((Me._Credits = value)  _
						= false) Then
				Me.OnCreditsChanging(value)
				Me.SendPropertyChanging
				Me._Credits = value
				Me.SendPropertyChanged("Credits")
				Me.OnCreditsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Semester", DbType:="Int NOT NULL")>  _
	Public Property Semester() As Integer
		Get
			Return Me._Semester
		End Get
		Set
			If ((Me._Semester = value)  _
						= false) Then
				If Me._SemesterTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSemesterChanging(value)
				Me.SendPropertyChanging
				Me._Semester = value
				Me.SendPropertyChanged("Semester")
				Me.OnSemesterChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FacultyId", DbType:="Int NOT NULL")>  _
	Public Property FacultyId() As Integer
		Get
			Return Me._FacultyId
		End Get
		Set
			If ((Me._FacultyId = value)  _
						= false) Then
				If Me._FacultyTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFacultyIdChanging(value)
				Me.SendPropertyChanging
				Me._FacultyId = value
				Me.SendPropertyChanged("FacultyId")
				Me.OnFacultyIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="Date NOT NULL")>  _
	Public Property StartDate() As Date
		Get
			Return Me._StartDate
		End Get
		Set
			If ((Me._StartDate = value)  _
						= false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDate", DbType:="Date NOT NULL")>  _
	Public Property EndDate() As Date
		Get
			Return Me._EndDate
		End Get
		Set
			If ((Me._EndDate = value)  _
						= false) Then
				Me.OnEndDateChanging(value)
				Me.SendPropertyChanging
				Me._EndDate = value
				Me.SendPropertyChanged("EndDate")
				Me.OnEndDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CourseTable_ClassroomTable", Storage:="_ClassroomTables", ThisKey:="CourseId", OtherKey:="CourseId")>  _
	Public Property ClassroomTables() As EntitySet(Of ClassroomTable)
		Get
			Return Me._ClassroomTables
		End Get
		Set
			Me._ClassroomTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CourseTable_TextbookTable", Storage:="_TextbookTables", ThisKey:="CourseId", OtherKey:="CourseId")>  _
	Public Property TextbookTables() As EntitySet(Of TextbookTable)
		Get
			Return Me._TextbookTables
		End Get
		Set
			Me._TextbookTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FacultyTable_CourseTable", Storage:="_FacultyTable", ThisKey:="FacultyId", OtherKey:="FacultyId", IsForeignKey:=true)>  _
	Public Property FacultyTable() As FacultyTable
		Get
			Return Me._FacultyTable.Entity
		End Get
		Set
			Dim previousValue As FacultyTable = Me._FacultyTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FacultyTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FacultyTable.Entity = Nothing
					previousValue.CourseTables.Remove(Me)
				End If
				Me._FacultyTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CourseTables.Add(Me)
					Me._FacultyId = value.FacultyId
				Else
					Me._FacultyId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("FacultyTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SemesterTable_CourseTable", Storage:="_SemesterTable", ThisKey:="Semester", OtherKey:="SemesterId", IsForeignKey:=true)>  _
	Public Property SemesterTable() As SemesterTable
		Get
			Return Me._SemesterTable.Entity
		End Get
		Set
			Dim previousValue As SemesterTable = Me._SemesterTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SemesterTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SemesterTable.Entity = Nothing
					previousValue.CourseTables.Remove(Me)
				End If
				Me._SemesterTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CourseTables.Add(Me)
					Me._Semester = value.SemesterId
				Else
					Me._Semester = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("SemesterTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ClassroomTables(ByVal entity As ClassroomTable)
		Me.SendPropertyChanging
		entity.CourseTable = Me
	End Sub
	
	Private Sub detach_ClassroomTables(ByVal entity As ClassroomTable)
		Me.SendPropertyChanging
		entity.CourseTable = Nothing
	End Sub
	
	Private Sub attach_TextbookTables(ByVal entity As TextbookTable)
		Me.SendPropertyChanging
		entity.CourseTable = Me
	End Sub
	
	Private Sub detach_TextbookTables(ByVal entity As TextbookTable)
		Me.SendPropertyChanging
		entity.CourseTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FacultyTable")>  _
Partial Public Class FacultyTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FacultyId As Integer
	
	Private _ProfName As String
	
	Private _ProfLastname As String
	
	Private _Email As String
	
	Private _PhoneNumber As String
	
	Private _UserId As System.Nullable(Of Integer)
	
	Private _ClassroomTables As EntitySet(Of ClassroomTable)
	
	Private _CourseTables As EntitySet(Of CourseTable)
	
	Private _UserTable As EntityRef(Of UserTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFacultyIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnFacultyIdChanged()
    End Sub
    Partial Private Sub OnProfNameChanging(value As String)
    End Sub
    Partial Private Sub OnProfNameChanged()
    End Sub
    Partial Private Sub OnProfLastnameChanging(value As String)
    End Sub
    Partial Private Sub OnProfLastnameChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnPhoneNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNumberChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ClassroomTables = New EntitySet(Of ClassroomTable)(AddressOf Me.attach_ClassroomTables, AddressOf Me.detach_ClassroomTables)
		Me._CourseTables = New EntitySet(Of CourseTable)(AddressOf Me.attach_CourseTables, AddressOf Me.detach_CourseTables)
		Me._UserTable = CType(Nothing, EntityRef(Of UserTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FacultyId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property FacultyId() As Integer
		Get
			Return Me._FacultyId
		End Get
		Set
			If ((Me._FacultyId = value)  _
						= false) Then
				Me.OnFacultyIdChanging(value)
				Me.SendPropertyChanging
				Me._FacultyId = value
				Me.SendPropertyChanged("FacultyId")
				Me.OnFacultyIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProfName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property ProfName() As String
		Get
			Return Me._ProfName
		End Get
		Set
			If (String.Equals(Me._ProfName, value) = false) Then
				Me.OnProfNameChanging(value)
				Me.SendPropertyChanging
				Me._ProfName = value
				Me.SendPropertyChanged("ProfName")
				Me.OnProfNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProfLastname", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property ProfLastname() As String
		Get
			Return Me._ProfLastname
		End Get
		Set
			If (String.Equals(Me._ProfLastname, value) = false) Then
				Me.OnProfLastnameChanging(value)
				Me.SendPropertyChanging
				Me._ProfLastname = value
				Me.SendPropertyChanged("ProfLastname")
				Me.OnProfLastnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNumber", DbType:="NChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property PhoneNumber() As String
		Get
			Return Me._PhoneNumber
		End Get
		Set
			If (String.Equals(Me._PhoneNumber, value) = false) Then
				Me.OnPhoneNumberChanging(value)
				Me.SendPropertyChanging
				Me._PhoneNumber = value
				Me.SendPropertyChanged("PhoneNumber")
				Me.OnPhoneNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="Int")>  _
	Public Property UserId() As System.Nullable(Of Integer)
		Get
			Return Me._UserId
		End Get
		Set
			If (Me._UserId.Equals(value) = false) Then
				If Me._UserTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FacultyTable_ClassroomTable", Storage:="_ClassroomTables", ThisKey:="FacultyId", OtherKey:="FacultyId")>  _
	Public Property ClassroomTables() As EntitySet(Of ClassroomTable)
		Get
			Return Me._ClassroomTables
		End Get
		Set
			Me._ClassroomTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FacultyTable_CourseTable", Storage:="_CourseTables", ThisKey:="FacultyId", OtherKey:="FacultyId")>  _
	Public Property CourseTables() As EntitySet(Of CourseTable)
		Get
			Return Me._CourseTables
		End Get
		Set
			Me._CourseTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UserTable_FacultyTable", Storage:="_UserTable", ThisKey:="UserId", OtherKey:="UserId", IsForeignKey:=true)>  _
	Public Property UserTable() As UserTable
		Get
			Return Me._UserTable.Entity
		End Get
		Set
			Dim previousValue As UserTable = Me._UserTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._UserTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._UserTable.Entity = Nothing
					previousValue.FacultyTables.Remove(Me)
				End If
				Me._UserTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FacultyTables.Add(Me)
					Me._UserId = value.UserId
				Else
					Me._UserId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("UserTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ClassroomTables(ByVal entity As ClassroomTable)
		Me.SendPropertyChanging
		entity.FacultyTable = Me
	End Sub
	
	Private Sub detach_ClassroomTables(ByVal entity As ClassroomTable)
		Me.SendPropertyChanging
		entity.FacultyTable = Nothing
	End Sub
	
	Private Sub attach_CourseTables(ByVal entity As CourseTable)
		Me.SendPropertyChanging
		entity.FacultyTable = Me
	End Sub
	
	Private Sub detach_CourseTables(ByVal entity As CourseTable)
		Me.SendPropertyChanging
		entity.FacultyTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SemesterTable")>  _
Partial Public Class SemesterTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SemesterId As Integer
	
	Private _Semester As String
	
	Private _StarDate As Date
	
	Private _EndDate As Date
	
	Private _CourseTables As EntitySet(Of CourseTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSemesterIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnSemesterIdChanged()
    End Sub
    Partial Private Sub OnSemesterChanging(value As String)
    End Sub
    Partial Private Sub OnSemesterChanged()
    End Sub
    Partial Private Sub OnStarDateChanging(value As Date)
    End Sub
    Partial Private Sub OnStarDateChanged()
    End Sub
    Partial Private Sub OnEndDateChanging(value As Date)
    End Sub
    Partial Private Sub OnEndDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CourseTables = New EntitySet(Of CourseTable)(AddressOf Me.attach_CourseTables, AddressOf Me.detach_CourseTables)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SemesterId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SemesterId() As Integer
		Get
			Return Me._SemesterId
		End Get
		Set
			If ((Me._SemesterId = value)  _
						= false) Then
				Me.OnSemesterIdChanging(value)
				Me.SendPropertyChanging
				Me._SemesterId = value
				Me.SendPropertyChanged("SemesterId")
				Me.OnSemesterIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Semester", DbType:="NChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property Semester() As String
		Get
			Return Me._Semester
		End Get
		Set
			If (String.Equals(Me._Semester, value) = false) Then
				Me.OnSemesterChanging(value)
				Me.SendPropertyChanging
				Me._Semester = value
				Me.SendPropertyChanged("Semester")
				Me.OnSemesterChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StarDate", DbType:="Date NOT NULL")>  _
	Public Property StarDate() As Date
		Get
			Return Me._StarDate
		End Get
		Set
			If ((Me._StarDate = value)  _
						= false) Then
				Me.OnStarDateChanging(value)
				Me.SendPropertyChanging
				Me._StarDate = value
				Me.SendPropertyChanged("StarDate")
				Me.OnStarDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDate", DbType:="Date NOT NULL")>  _
	Public Property EndDate() As Date
		Get
			Return Me._EndDate
		End Get
		Set
			If ((Me._EndDate = value)  _
						= false) Then
				Me.OnEndDateChanging(value)
				Me.SendPropertyChanging
				Me._EndDate = value
				Me.SendPropertyChanged("EndDate")
				Me.OnEndDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SemesterTable_CourseTable", Storage:="_CourseTables", ThisKey:="SemesterId", OtherKey:="Semester")>  _
	Public Property CourseTables() As EntitySet(Of CourseTable)
		Get
			Return Me._CourseTables
		End Get
		Set
			Me._CourseTables.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CourseTables(ByVal entity As CourseTable)
		Me.SendPropertyChanging
		entity.SemesterTable = Me
	End Sub
	
	Private Sub detach_CourseTables(ByVal entity As CourseTable)
		Me.SendPropertyChanging
		entity.SemesterTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.StudentTable")>  _
Partial Public Class StudentTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _StudentId As Integer
	
	Private _StudentName As String
	
	Private _StudentLastname As String
	
	Private _Classification As String
	
	Private _Gender As String
	
	Private _Email As String
	
	Private _PhoneNumber As String
	
	Private _UserId As System.Nullable(Of Integer)
	
	Private _ClassroomTables As EntitySet(Of ClassroomTable)
	
	Private _UserTable As EntityRef(Of UserTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStudentIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnStudentIdChanged()
    End Sub
    Partial Private Sub OnStudentNameChanging(value As String)
    End Sub
    Partial Private Sub OnStudentNameChanged()
    End Sub
    Partial Private Sub OnStudentLastnameChanging(value As String)
    End Sub
    Partial Private Sub OnStudentLastnameChanged()
    End Sub
    Partial Private Sub OnClassificationChanging(value As String)
    End Sub
    Partial Private Sub OnClassificationChanged()
    End Sub
    Partial Private Sub OnGenderChanging(value As String)
    End Sub
    Partial Private Sub OnGenderChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnPhoneNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNumberChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ClassroomTables = New EntitySet(Of ClassroomTable)(AddressOf Me.attach_ClassroomTables, AddressOf Me.detach_ClassroomTables)
		Me._UserTable = CType(Nothing, EntityRef(Of UserTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StudentId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property StudentId() As Integer
		Get
			Return Me._StudentId
		End Get
		Set
			If ((Me._StudentId = value)  _
						= false) Then
				Me.OnStudentIdChanging(value)
				Me.SendPropertyChanging
				Me._StudentId = value
				Me.SendPropertyChanged("StudentId")
				Me.OnStudentIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StudentName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property StudentName() As String
		Get
			Return Me._StudentName
		End Get
		Set
			If (String.Equals(Me._StudentName, value) = false) Then
				Me.OnStudentNameChanging(value)
				Me.SendPropertyChanging
				Me._StudentName = value
				Me.SendPropertyChanged("StudentName")
				Me.OnStudentNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StudentLastname", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property StudentLastname() As String
		Get
			Return Me._StudentLastname
		End Get
		Set
			If (String.Equals(Me._StudentLastname, value) = false) Then
				Me.OnStudentLastnameChanging(value)
				Me.SendPropertyChanging
				Me._StudentLastname = value
				Me.SendPropertyChanged("StudentLastname")
				Me.OnStudentLastnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Classification", DbType:="NChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property Classification() As String
		Get
			Return Me._Classification
		End Get
		Set
			If (String.Equals(Me._Classification, value) = false) Then
				Me.OnClassificationChanging(value)
				Me.SendPropertyChanging
				Me._Classification = value
				Me.SendPropertyChanged("Classification")
				Me.OnClassificationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gender", DbType:="NChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property Gender() As String
		Get
			Return Me._Gender
		End Get
		Set
			If (String.Equals(Me._Gender, value) = false) Then
				Me.OnGenderChanging(value)
				Me.SendPropertyChanging
				Me._Gender = value
				Me.SendPropertyChanged("Gender")
				Me.OnGenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNumber", DbType:="NChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property PhoneNumber() As String
		Get
			Return Me._PhoneNumber
		End Get
		Set
			If (String.Equals(Me._PhoneNumber, value) = false) Then
				Me.OnPhoneNumberChanging(value)
				Me.SendPropertyChanging
				Me._PhoneNumber = value
				Me.SendPropertyChanged("PhoneNumber")
				Me.OnPhoneNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="Int")>  _
	Public Property UserId() As System.Nullable(Of Integer)
		Get
			Return Me._UserId
		End Get
		Set
			If (Me._UserId.Equals(value) = false) Then
				If Me._UserTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="StudentTable_ClassroomTable", Storage:="_ClassroomTables", ThisKey:="StudentId", OtherKey:="StudentId")>  _
	Public Property ClassroomTables() As EntitySet(Of ClassroomTable)
		Get
			Return Me._ClassroomTables
		End Get
		Set
			Me._ClassroomTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UserTable_StudentTable", Storage:="_UserTable", ThisKey:="UserId", OtherKey:="UserId", IsForeignKey:=true)>  _
	Public Property UserTable() As UserTable
		Get
			Return Me._UserTable.Entity
		End Get
		Set
			Dim previousValue As UserTable = Me._UserTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._UserTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._UserTable.Entity = Nothing
					previousValue.StudentTables.Remove(Me)
				End If
				Me._UserTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.StudentTables.Add(Me)
					Me._UserId = value.UserId
				Else
					Me._UserId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("UserTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ClassroomTables(ByVal entity As ClassroomTable)
		Me.SendPropertyChanging
		entity.StudentTable = Me
	End Sub
	
	Private Sub detach_ClassroomTables(ByVal entity As ClassroomTable)
		Me.SendPropertyChanging
		entity.StudentTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TextbookTable")>  _
Partial Public Class TextbookTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BookId As Integer
	
	Private _BookName As String
	
	Private _CourseId As Integer
	
	Private _CourseTable As EntityRef(Of CourseTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBookIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnBookIdChanged()
    End Sub
    Partial Private Sub OnBookNameChanging(value As String)
    End Sub
    Partial Private Sub OnBookNameChanged()
    End Sub
    Partial Private Sub OnCourseIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCourseIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CourseTable = CType(Nothing, EntityRef(Of CourseTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property BookId() As Integer
		Get
			Return Me._BookId
		End Get
		Set
			If ((Me._BookId = value)  _
						= false) Then
				Me.OnBookIdChanging(value)
				Me.SendPropertyChanging
				Me._BookId = value
				Me.SendPropertyChanged("BookId")
				Me.OnBookIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookName", DbType:="NChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property BookName() As String
		Get
			Return Me._BookName
		End Get
		Set
			If (String.Equals(Me._BookName, value) = false) Then
				Me.OnBookNameChanging(value)
				Me.SendPropertyChanging
				Me._BookName = value
				Me.SendPropertyChanged("BookName")
				Me.OnBookNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseId", DbType:="Int NOT NULL")>  _
	Public Property CourseId() As Integer
		Get
			Return Me._CourseId
		End Get
		Set
			If ((Me._CourseId = value)  _
						= false) Then
				If Me._CourseTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCourseIdChanging(value)
				Me.SendPropertyChanging
				Me._CourseId = value
				Me.SendPropertyChanged("CourseId")
				Me.OnCourseIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CourseTable_TextbookTable", Storage:="_CourseTable", ThisKey:="CourseId", OtherKey:="CourseId", IsForeignKey:=true)>  _
	Public Property CourseTable() As CourseTable
		Get
			Return Me._CourseTable.Entity
		End Get
		Set
			Dim previousValue As CourseTable = Me._CourseTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CourseTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CourseTable.Entity = Nothing
					previousValue.TextbookTables.Remove(Me)
				End If
				Me._CourseTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TextbookTables.Add(Me)
					Me._CourseId = value.CourseId
				Else
					Me._CourseId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CourseTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UserTable")>  _
Partial Public Class UserTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserId As Integer
	
	Private _Username As String
	
	Private _Password As String
	
	Private _Role As String
	
	Private _FacultyTables As EntitySet(Of FacultyTable)
	
	Private _StudentTables As EntitySet(Of StudentTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnUsernameChanging(value As String)
    End Sub
    Partial Private Sub OnUsernameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnRoleChanging(value As String)
    End Sub
    Partial Private Sub OnRoleChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FacultyTables = New EntitySet(Of FacultyTable)(AddressOf Me.attach_FacultyTables, AddressOf Me.detach_FacultyTables)
		Me._StudentTables = New EntitySet(Of StudentTable)(AddressOf Me.attach_StudentTables, AddressOf Me.detach_StudentTables)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UserId() As Integer
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Username", DbType:="NChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property Username() As String
		Get
			Return Me._Username
		End Get
		Set
			If (String.Equals(Me._Username, value) = false) Then
				Me.OnUsernameChanging(value)
				Me.SendPropertyChanging
				Me._Username = value
				Me.SendPropertyChanged("Username")
				Me.OnUsernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="NChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Role", DbType:="NChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property Role() As String
		Get
			Return Me._Role
		End Get
		Set
			If (String.Equals(Me._Role, value) = false) Then
				Me.OnRoleChanging(value)
				Me.SendPropertyChanging
				Me._Role = value
				Me.SendPropertyChanged("Role")
				Me.OnRoleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UserTable_FacultyTable", Storage:="_FacultyTables", ThisKey:="UserId", OtherKey:="UserId")>  _
	Public Property FacultyTables() As EntitySet(Of FacultyTable)
		Get
			Return Me._FacultyTables
		End Get
		Set
			Me._FacultyTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UserTable_StudentTable", Storage:="_StudentTables", ThisKey:="UserId", OtherKey:="UserId")>  _
	Public Property StudentTables() As EntitySet(Of StudentTable)
		Get
			Return Me._StudentTables
		End Get
		Set
			Me._StudentTables.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_FacultyTables(ByVal entity As FacultyTable)
		Me.SendPropertyChanging
		entity.UserTable = Me
	End Sub
	
	Private Sub detach_FacultyTables(ByVal entity As FacultyTable)
		Me.SendPropertyChanging
		entity.UserTable = Nothing
	End Sub
	
	Private Sub attach_StudentTables(ByVal entity As StudentTable)
		Me.SendPropertyChanging
		entity.UserTable = Me
	End Sub
	
	Private Sub detach_StudentTables(ByVal entity As StudentTable)
		Me.SendPropertyChanging
		entity.UserTable = Nothing
	End Sub
End Class
